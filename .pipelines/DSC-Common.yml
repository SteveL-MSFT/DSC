
parameters:
  - name: OfficialBuild
    type: boolean
    default: false

variables:
  BuildConfiguration: 'release'
  PackageRoot: '$(System.ArtifactsDirectory)/Packages'
  # Currently mariner image can't be used for musl build
  # LinuxContainerImage: 'mcr.microsoft.com/onebranch/cbl-mariner/build:2.0'
  WindowsContainerImage: 'onebranch.azurecr.io/windows/ltsc2022/vse2022:latest'

stages:
- stage: BuildAndSign
  displayName: Build Native Binaries
  dependsOn: []
  jobs:
  - job: SetPackageVersion
    displayName: Set PackageVersion
    pool:
      type: windows
      vmImage: windows-latest
    variables:
      repoRoot: $(Build.SourcesDirectory)\DSC
      ob_sdl_tsa_configFile: $(Build.SourcesDirectory)\DSC\.config\tsaoptions.json
      ob_outputDirectory: '$(Build.ArtifactStagingDirectory)'
      ob_sdl_sbom_enabled: false
      ob_signing_setup_enabled: false
      ob_sdl_codeql_compiled_enabled: false
    steps:
    - checkout: self
      path: $(repoRoot)
    - pwsh: |
        $packageVersion = $(repoRoot)/build.ps1 -GetPackageVersion
        $vstsCommandString = "vso[task.setvariable variable=Version;isoutput=true]$packageVersion"
        Write-Host ("sending " + $vstsCommandString)
        Write-Host "##$vstsCommandString"
      name: Package

  - job: BuildWin
    dependsOn: SetPackageVersion
    strategy:
      matrix:
        Windows x64:
          Suffix: x64
          buildName: x86_64-pc-windows-msvc
        Windows x64_arm64:
          Suffix: arm64
          buildName: aarch64-pc-windows-msvc
    variables:
      PackageVersion: $[ dependencies.SetPackageVersion.outputs['Package.Version'] ]
      ob_sdl_tsa_configFile: '$(Build.SourcesDirectory)\DSC\.config\tsaoptions.json'
      ob_outputDirectory: '$(Build.ArtifactStagingDirectory)'
      ob_artifactSuffix: $(Suffix)
      repoRoot: '$(Build.SourcesDirectory)\DSC'
      signSrcPath: '$(Build.SourcesDirectory)\out'
      ob_sdl_sbom_enabled: $[ parameters.OfficialBuild ]
      ob_signing_setup_enabled: $[ parameters.OfficialBuild ]
      ob_sdl_codeql_compiled_enabled: $[ parameters.OfficialBuild ]
    pool:
      type: windows
    displayName: BuildWin
    steps:
    - checkout: self
      path: $(repoRoot)
      env:
        ob_restore_phase: true
    - ${{ if eq(parameters.OfficialBuild, true) }}:
      task: CodeQL3000Init@0 # Add CodeQL Init task right before your 'Build' step.
      inputs:
        Enabled: true
        AnalyzeInPipeline: true
        Language: rust
      env:
        ob_restore_phase: true
    - pwsh: |
        $tmpdir = "$(Agent.TempDirectory)"
        Write-Host "##vso[task.setvariable variable=CARGO_TARGET_DIR;]$tmpdir"
      displayName: üõ†Ô∏è Workaround for the LoadLibrary ACCESS_VIOLATION OneBranch issue
      env:
        ob_restore_phase: true
    - task: RustInstaller@1
      inputs:
        rustVersion: ms-stable
        toolchainFeed: https://pkgs.dev.azure.com/mscodehub/Rust/_packaging/Rust/nuget/v3/index.json
        additionalTargets: $(buildName)
      displayName: Install Rust
      env:
        ob_restore_phase: true
    - pwsh: |
        Set-Location "$(Build.SourcesDirectory)/DSC"
        $LLVMBIN = "$($env:PROGRAMFILES)\Microsoft Visual Studio\2022\Enterprise\VC\Tools\Llvm\bin"
        if (!(Test-Path $LLVMBIN)) {
          throw "LLVM path '$LLVMBIN' does not exist"
        }
        $env:PATH += ";$LLVMBIN"
        write-verbose -verbose (gcm clang.exe | out-string)
        write-verbose -verbose "Toolchains:"
        msrustup toolchain list
        ./build.ps1 -Verbose -Clean -Release -Architecture $(buildName) -SkipLinkCheck
      displayName: 'Build $(buildName)'
      env:
        ob_restore_phase: true
      condition: succeeded()
    - task: CodeQL3000Finalize@0 # Add CodeQL Finalize task right after your 'Build' step.
      condition: always()
      env:
        ob_restore_phase: true
    - pwsh: |
        $null = New-Item -ItemType Directory -Path "$(PackageRoot)" -ErrorAction Ignore
        $null = New-Item -ItemType Directory -Path "$(PackageRoot)/out" -ErrorAction Ignore
        $null = New-Item -ItemType Directory -Path "$(signSrcPath)" -ErrorAction Ignore
        # workaround known issue of building in OneBranch copying from TMP folder
        $null = New-Item -ItemType Directory -Path "$(signSrcPath)" -ErrorAction Ignore
        # copy only the exes from the TMP folder since it contains intermediately built files we don't want to sign
        write-host 'Binaries in $(env:CARGO_TARGET_DIR)'
        Copy-Item -Path "$env:CARGO_TARGET_DIR/$(buildName)/$(BuildConfiguration)/*.exe" -Destination "$(signSrcPath)" -Verbose
        Copy-Item -Path "$(Build.SourcesDirectory)/DSC/bin/$(buildName)/$(BuildConfiguration)/*" -Recurse -Destination "$(signSrcPath)" -Verbose -Force
        write-host 'Binaries in $(signSrcPath)'
        dir -r "$(signSrcPath)"
      displayName: Copy built binaries
      env:
        ob_restore_phase: true
      condition: succeeded()
    - ${{ if eq(parameters.OfficialBuild, true) }}:
      task: onebranch.pipeline.signing@1
      displayName: Sign 1st party files
      inputs:
        command: 'sign'
        signing_profile: external_distribution
        files_to_sign: |
          **\*.exe;
          **\*.ps1;
          **\*.psd1;
          **\*.psm1;
        search_root: $(signSrcPath)
    - task: CopyFiles@2
      displayName: "Copy signed files to build target dir"
      inputs:
        SourceFolder: "$(signSrcPath)"
        Contents: '**'
        TargetFolder: $(Build.SourcesDirectory)/DSC/bin/$(buildName)/$(BuildConfiguration)
        OverWrite: true
    - pwsh: |
        Set-Location "$(Build.SourcesDirectory)/DSC"
        ./build.ps1 -PackageType zip -Architecture $(buildName) -Release
        Copy-Item ./bin/*.zip "$(ob_outputDirectory)"
      displayName: 'Zip $(buildName)'
      condition: succeeded()
    - pwsh: |
        Set-Location "$(Build.SourcesDirectory)/DSC"
        ./build.ps1 -PackageType msix -Architecture $(buildName) -Release -UseX64MakeAppx
        Copy-Item ./bin/msix/*.msix "$(ob_outputDirectory)" -Verbose
      displayName: 'Create msix for $(buildName)'
      condition: succeeded()

  - job: CreateMsixBundle
    dependsOn: BuildWin
    variables:
      ob_outputDirectory: '$(Build.ArtifactStagingDirectory)'
      ob_sdl_tsa_configFile: '$(Build.SourcesDirectory)\DSC\.config\tsaoptions.json'
      ob_sdl_sbom_enabled: $[ parameters.OfficialBuild ]
      ob_signing_setup_enabled: $[ parameters.OfficialBuild ]
      ob_sdl_codeql_compiled_enabled: $[ parameters.OfficialBuild ]
    pool:
      type: windows
    steps:
    - checkout: self
      path: $(repoRoot)
    - download: current
      artifact: drop_BuildAndSign_BuildWinx64
      patterns: '*.msix'
    - download: current
      artifact: drop_BuildAndSign_BuildWinarm64
      patterns: '*.msix'
    - pwsh: |
        Set-Location "$(Build.SourcesDirectory)/DSC"
        $null = New-Item -ItemType Directory -Path "./bin/msix" -Force -ErrorAction Ignore
        Copy-Item "$(Pipeline.Workspace)/drop_BuildAndSign_BuildWinx64/*.msix" ./bin/msix -Verbose
        Copy-Item "$(Pipeline.Workspace)/drop_BuildAndSign_BuildWinarm64/*.msix" ./bin/msix -Verbose
        ./build.ps1 -PackageType msixbundle
        Copy-Item ./bin/*.msixbundle "$(ob_outputDirectory)"
      displayName: 'Create msixbundle'
      condition: succeeded()

  ## Keeping this in case we find a need for gnu builds in the future although the musl builds are statically linked and work on glibc systems

  # - job: BuildLinux
  #   dependsOn: SetPackageVersion
  #   variables:
  #     LinuxContainerImage: 'onebranch.azurecr.io/linux/ubuntu-2204:latest'
  #     PackageVersion: $[ dependencies.SetPackageVersion.outputs['Package.Version'] ]
  #     ob_outputDirectory: '$(Build.ArtifactStagingDirectory)'
  #   displayName: Linux-x64-gnu
  #   pool:
  #     type: linux
  #   steps:
  #   - task: RustInstaller@1
  #     inputs:
  #       rustVersion: ms-stable
  #       toolchainFeed: https://pkgs.dev.azure.com/mscodehub/Rust/_packaging/Rust/nuget/v3/index.json
  #       additionalTargets: x86_64-unknown-linux-gnu
  #     displayName: Install Rust
  #     env:
  #       ob_restore_phase: true
  #   - pwsh: |
  #       ./build.ps1 -Release -Architecture x86_64-unknown-linux-gnu
  #       ./build.ps1 -PackageType tgz -Architecture x86_64-unknown-linux-gnu -Release
  #       Copy-Item ./bin/*.tar.gz "$(ob_outputDirectory)"
  #     displayName: 'Build x86_64-unknown-linux-gnu'
  #     condition: succeeded()

  # - job: BuildLinuxArm64
  #   dependsOn: SetPackageVersion
  #   variables:
  #     LinuxContainerImage: 'onebranch.azurecr.io/linux/ubuntu-2004-arm64:latest'
  #     PackageVersion: $[ dependencies.SetPackageVersion.outputs['Package.Version'] ]
  #     ob_outputDirectory: '$(Build.ArtifactStagingDirectory)'
  #   displayName: Linux-ARM64-gnu
  #   pool:
  #     type: linux
  #     hostArchitecture: arm64
  #   steps:
  #   - task: RustInstaller@1
  #     inputs:
  #       rustVersion: ms-stable
  #       toolchainFeed: https://pkgs.dev.azure.com/mscodehub/Rust/_packaging/Rust/nuget/v3/index.json
  #       additionalTargets: aarch64-unknown-linux-gnu
  #     displayName: Install Rust
  #     env:
  #       ob_restore_phase: true
  #   - pwsh: |
  #       apt update
  #       apt -y install gcc-aarch64-linux-gnu
  #       if ((openssl version -d) -match 'OPENSSLDIR: "(?<dir>.*?)"') {
  #         $env:OPENSSL_LIB_DIR = $matches['dir']
  #       }
  #       ./build.ps1 -Release -Architecture aarch64-unknown-linux-gnu
  #       ./build.ps1 -PackageType tgz -Architecture aarch64-unknown-linux-gnu -Release
  #       Copy-Item ./bin/*.tar.gz "$(ob_outputDirectory)"
  #     displayName: 'Build aarch64-unknown-linux-gnu'
  #     condition: succeeded()

  - job: BuildLinuxMusl
    dependsOn: SetPackageVersion
    variables:
      LinuxContainerImage: 'onebranch.azurecr.io/linux/ubuntu-2204:latest'
      PackageVersion: $[ dependencies.SetPackageVersion.outputs['Package.Version'] ]
      ob_outputDirectory: '$(Build.ArtifactStagingDirectory)'
    displayName: Linux-x64-musl
    pool:
      type: linux
    steps:
    - task: RustInstaller@1
      inputs:
        rustVersion: ms-stable
        toolchainFeed: https://pkgs.dev.azure.com/mscodehub/Rust/_packaging/Rust/nuget/v3/index.json
        additionalTargets: x86_64-unknown-linux-musl
      displayName: Install Rust
      env:
        ob_restore_phase: true
    - pwsh: |
        apt update
        apt -y install musl-tools
        ./build.ps1 -Verbose -Clean -Release -Architecture x86_64-unknown-linux-musl
        ./build.ps1 -PackageType tgz -Architecture x86_64-unknown-linux-musl -Release
        Copy-Item ./bin/*.tar.gz "$(ob_outputDirectory)"
      displayName: 'Build x86_64-unknown-linux-musl'
      condition: succeeded()

  - job: BuildLinuxArm64Musl
    dependsOn: SetPackageVersion
    variables:
      LinuxContainerImage: 'onebranch.azurecr.io/linux/ubuntu-2004-arm64:latest'
      PackageVersion: $[ dependencies.SetPackageVersion.outputs['Package.Version'] ]
      ob_outputDirectory: '$(Build.ArtifactStagingDirectory)'
    displayName: Linux-ARM64-musl
    pool:
      type: linux
      hostArchitecture: arm64
    steps:
    - task: RustInstaller@1
      inputs:
        rustVersion: ms-stable
        toolchainFeed: https://pkgs.dev.azure.com/mscodehub/Rust/_packaging/Rust/nuget/v3/index.json
        additionalTargets: aarch64-unknown-linux-musl
      displayName: Install Rust
      env:
        ob_restore_phase: true
    - pwsh: |
        $env:CC_aarch64_unknown_linux_musl='clang'
        $env:AR_aarch64_unknown_linux_musl='llvm-ar'
        $env:CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_RUSTFLAGS="-Clink-self-contained=yes -Clinker=rust-lld"
        apt update
        apt -y install clang
        apt -y install llvm
        apt -y install musl-tools
        apt -y install gcc-multilib
        apt -y install libssl-dev
        apt -y install pkg-config
        rustup default stable-aarch64-unknown-linux-musl
        if ((openssl version -d) -match 'OPENSSLDIR: "(?<dir>.*?)"') {
          $env:OPENSSL_LIB_DIR = $matches['dir']
        }
        ./build.ps1 -Verbose -Clean -Release -Architecture aarch64-unknown-linux-musl
        ./build.ps1 -PackageType tgz -Architecture aarch64-unknown-linux-musl -Release
        Copy-Item ./bin/*.tar.gz "$(ob_outputDirectory)"
      displayName: 'Build aarch64-unknown-linux-musl'
      condition: succeeded()

  - job: BuildMac
    dependsOn: SetPackageVersion
    variables:
      PackageVersion: $[ dependencies.SetPackageVersion.outputs['Package.Version'] ]
      ob_outputDirectory: '$(Build.ArtifactStagingDirectory)'
    displayName: BuildMac
    pool:
      type: linux
      isCustom: true
      name: Azure Pipelines
      vmImage: 'macOS-latest'
    strategy:
      matrix:
        macOS x64:
          buildName: x86_64-apple-darwin
        macOS arm64:
          buildName: aarch64-apple-darwin
    steps:
    - task: RustInstaller@1
      inputs:
        rustVersion: ms-stable
        toolchainFeed: https://pkgs.dev.azure.com/mscodehub/Rust/_packaging/Rust/nuget/v3/index.json
        additionalTargets: $(buildName)
      displayName: Install Rust
      env:
        ob_restore_phase: true
    - pwsh: |
        ./build.ps1 -Verbose -Clean -Release -Architecture $(buildName)
        ./build.ps1 -PackageType tgz -Architecture $(buildName) -Release
        Copy-Item ./bin/*.tar.gz "$(ob_outputDirectory)"
        Write-Host "##vso[artifact.upload containerfolder=release;artifactname=release]$(ob_outputDirectory)/DSC-$(PackageVersion)-$(buildName).tar.gz"
      displayName: 'Build $(buildName)'
      condition: succeeded()
